"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("./util");
function isVgSignalRef(o) {
    return !!o['signal'];
}
exports.isVgSignalRef = isVgSignalRef;
function isVgRangeStep(range) {
    return !!range['step'];
}
exports.isVgRangeStep = isVgRangeStep;
function isDataRefUnionedDomain(domain) {
    if (!util_1.isArray(domain)) {
        return 'fields' in domain && !('data' in domain);
    }
    return false;
}
exports.isDataRefUnionedDomain = isDataRefUnionedDomain;
function isFieldRefUnionDomain(domain) {
    if (!util_1.isArray(domain)) {
        return 'fields' in domain && 'data' in domain;
    }
    return false;
}
exports.isFieldRefUnionDomain = isFieldRefUnionDomain;
function isDataRefDomain(domain) {
    if (!util_1.isArray(domain)) {
        return 'field' in domain && 'data' in domain;
    }
    return false;
}
exports.isDataRefDomain = isDataRefDomain;
function isSignalRefDomain(domain) {
    if (!util_1.isArray(domain)) {
        return 'signal' in domain;
    }
    return false;
}
exports.isSignalRefDomain = isSignalRefDomain;
var VG_MARK_CONFIG_INDEX = {
    opacity: 1,
    fill: 1,
    fillOpacity: 1,
    stroke: 1,
    strokeWidth: 1,
    strokeOpacity: 1,
    strokeDash: 1,
    strokeDashOffset: 1,
    size: 1,
    shape: 1,
    interpolate: 1,
    tension: 1,
    orient: 1,
    align: 1,
    baseline: 1,
    text: 1,
    limit: 1,
    dx: 1,
    dy: 1,
    radius: 1,
    theta: 1,
    angle: 1,
    font: 1,
    fontSize: 1,
    fontWeight: 1,
    fontStyle: 1
    // commented below are vg channel that do not have mark config.
    // 'x'|'x2'|'xc'|'width'|'y'|'y2'|'yc'|'height'
    // cursor: 1,
    // clip: 1,
    // dir: 1,
    // ellipsis: 1,
    // endAngle: 1,
    // path: 1,
    // innerRadius: 1,
    // outerRadius: 1,
    // startAngle: 1,
    // url: 1,
};
exports.VG_MARK_CONFIGS = util_1.flagKeys(VG_MARK_CONFIG_INDEX);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVnYS5zY2hlbWEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdmVnYS5zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFLQSwrQkFBK0M7QUFnRC9DLHVCQUE4QixDQUFNO0lBQ2xDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZCLENBQUM7QUFGRCxzQ0FFQztBQW1DRCx1QkFBOEIsS0FBYztJQUMxQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN6QixDQUFDO0FBRkQsc0NBRUM7QUF1REQsZ0NBQXVDLE1BQWdCO0lBQ3JELEVBQUUsQ0FBQyxDQUFDLENBQUMsY0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixNQUFNLENBQUMsUUFBUSxJQUFJLE1BQU0sSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUxELHdEQUtDO0FBRUQsK0JBQXNDLE1BQWdCO0lBQ3BELEVBQUUsQ0FBQyxDQUFDLENBQUMsY0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixNQUFNLENBQUMsUUFBUSxJQUFJLE1BQU0sSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDO0lBQ2hELENBQUM7SUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUxELHNEQUtDO0FBRUQseUJBQWdDLE1BQWdCO0lBQzlDLEVBQUUsQ0FBQyxDQUFDLENBQUMsY0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDO0lBQ2hELENBQUM7SUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUxELDBDQUtDO0FBRUQsMkJBQWtDLE1BQWdCO0lBQ2hELEVBQUUsQ0FBQyxDQUFDLENBQUMsY0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQixNQUFNLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQztJQUM1QixDQUFDO0lBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNmLENBQUM7QUFMRCw4Q0FLQztBQXUzQkQsSUFBTSxvQkFBb0IsR0FBNkI7SUFDckQsT0FBTyxFQUFFLENBQUM7SUFDVixJQUFJLEVBQUUsQ0FBQztJQUNQLFdBQVcsRUFBRSxDQUFDO0lBQ2QsTUFBTSxFQUFFLENBQUM7SUFDVCxXQUFXLEVBQUUsQ0FBQztJQUNkLGFBQWEsRUFBRSxDQUFDO0lBQ2hCLFVBQVUsRUFBRSxDQUFDO0lBQ2IsZ0JBQWdCLEVBQUUsQ0FBQztJQUNuQixJQUFJLEVBQUUsQ0FBQztJQUNQLEtBQUssRUFBRSxDQUFDO0lBQ1IsV0FBVyxFQUFFLENBQUM7SUFDZCxPQUFPLEVBQUUsQ0FBQztJQUNWLE1BQU0sRUFBRSxDQUFDO0lBQ1QsS0FBSyxFQUFFLENBQUM7SUFDUixRQUFRLEVBQUUsQ0FBQztJQUNYLElBQUksRUFBRSxDQUFDO0lBQ1AsS0FBSyxFQUFFLENBQUM7SUFDUixFQUFFLEVBQUUsQ0FBQztJQUNMLEVBQUUsRUFBRSxDQUFDO0lBQ0wsTUFBTSxFQUFFLENBQUM7SUFDVCxLQUFLLEVBQUUsQ0FBQztJQUNSLEtBQUssRUFBRSxDQUFDO0lBQ1IsSUFBSSxFQUFFLENBQUM7SUFDUCxRQUFRLEVBQUUsQ0FBQztJQUNYLFVBQVUsRUFBRSxDQUFDO0lBQ2IsU0FBUyxFQUFFLENBQUM7SUFDWiwrREFBK0Q7SUFDL0QsK0NBQStDO0lBQy9DLGFBQWE7SUFDYixXQUFXO0lBQ1gsVUFBVTtJQUNWLGVBQWU7SUFDZixlQUFlO0lBQ2YsV0FBVztJQUNYLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsaUJBQWlCO0lBQ2pCLFVBQVU7Q0FDWCxDQUFDO0FBRVcsUUFBQSxlQUFlLEdBQUcsZUFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FnZ3JlZ2F0ZU9wfSBmcm9tICcuL2FnZ3JlZ2F0ZSc7XG5pbXBvcnQge0Jhc2VCaW59IGZyb20gJy4vYmluJztcbmltcG9ydCB7TmljZVRpbWUsIFNjYWxlVHlwZX0gZnJvbSAnLi9zY2FsZSc7XG5pbXBvcnQge1NvcnRPcmRlcn0gZnJvbSAnLi9zb3J0JztcbmltcG9ydCB7U3RhY2tPZmZzZXR9IGZyb20gJy4vc3RhY2snO1xuaW1wb3J0IHtGbGFnLCBmbGFnS2V5cywgaXNBcnJheX0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IGludGVyZmFjZSBWZ0RhdGEge1xuICBuYW1lOiBzdHJpbmc7XG4gIHNvdXJjZT86IHN0cmluZztcbiAgdmFsdWVzPzogYW55O1xuICBmb3JtYXQ/OiB7XG4gICAgdHlwZT86IHN0cmluZztcbiAgICBwYXJzZT86IHN0cmluZyB8IG9iamVjdDtcbiAgICBwcm9wZXJ0eT86IHN0cmluZztcbiAgICBmZWF0dXJlPzogc3RyaW5nO1xuICAgIG1lc2g/OiBzdHJpbmc7XG4gIH07XG4gIHVybD86IHN0cmluZztcbiAgdHJhbnNmb3JtPzogVmdUcmFuc2Zvcm1bXTtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIFZnUGFyZW50UmVmIHtcbiAgcGFyZW50OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFZnRmllbGRSZWYgPSBzdHJpbmcgfCBWZ1BhcmVudFJlZiB8IFZnUGFyZW50UmVmW107XG5cbmV4cG9ydCB0eXBlIFZnU29ydEZpZWxkID0gYm9vbGVhbiB8IHtcbiAgZmllbGQ/OiBWZ0ZpZWxkUmVmLFxuICBvcDogQWdncmVnYXRlT3AsXG4gIG9yZGVyPzogU29ydE9yZGVyXG59O1xuXG4vKipcbiAqIFVuaW9uZWQgZG9tYWlucyBjYW4gb25seSBiZSBzb3J0ZWQgYnkgY291bnQgYWdncmVnYXRlLlxuICovXG5leHBvcnQgdHlwZSBWZ1VuaW9uU29ydEZpZWxkID0gYm9vbGVhbiB8IHtcbiAgb3A6ICdjb3VudCdcbiAgb3JkZXI/OiBTb3J0T3JkZXJcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmdEYXRhUmVmIHtcbiAgZGF0YTogc3RyaW5nO1xuICBmaWVsZDogVmdGaWVsZFJlZjtcbiAgc29ydD86IFZnU29ydEZpZWxkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZnU2lnbmFsUmVmIHtcbiAgc2lnbmFsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZnU2lnbmFsUmVmKG86IGFueSk6IG8gaXMgVmdTaWduYWxSZWYge1xuICByZXR1cm4gISFvWydzaWduYWwnXTtcbn1cblxuZXhwb3J0IHR5cGUgVmdFdmVudFN0cmVhbSA9IGFueTtcblxuLy8gVE9ETzogYWRkIHR5cGUgb2YgdmFsdWUgKE1ha2UgaXQgVmdWYWx1ZVJlZjxUPiB7dmFsdWU/OlQgLi4ufSlcbmV4cG9ydCBpbnRlcmZhY2UgVmdWYWx1ZVJlZiB7XG4gIHZhbHVlPzogbnVtYmVyIHwgc3RyaW5nIHwgYm9vbGVhbjtcbiAgZmllbGQ/OiBzdHJpbmcgfCB7XG4gICAgZGF0dW0/OiBzdHJpbmcsXG4gICAgZ3JvdXA/OiBzdHJpbmcsXG4gICAgcGFyZW50Pzogc3RyaW5nXG4gIH07XG4gIHNpZ25hbD86IHN0cmluZztcbiAgc2NhbGU/OiBzdHJpbmc7IC8vIFRPRE86IG9iamVjdFxuICBtdWx0PzogbnVtYmVyO1xuICBvZmZzZXQ/OiBudW1iZXIgfCBWZ1ZhbHVlUmVmO1xuICBiYW5kPzogYm9vbGVhbiB8IG51bWJlciB8IFZnVmFsdWVSZWY7XG59XG5cbi8vIFRPRE86IGFkZCB2ZyBwcmVmaXhcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVJlZlVuaW9uRG9tYWluIHtcbiAgZmllbGRzOiAoYW55W10gfCBWZ0RhdGFSZWYgfCBWZ1NpZ25hbFJlZilbXTtcbiAgc29ydD86IFZnVW5pb25Tb3J0RmllbGQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmdGaWVsZFJlZlVuaW9uRG9tYWluIHtcbiAgZGF0YTogc3RyaW5nO1xuICBmaWVsZHM6IFZnRmllbGRSZWZbXTtcbiAgc29ydD86IFZnVW5pb25Tb3J0RmllbGQ7XG59XG5cbmV4cG9ydCB0eXBlIFZnU2NoZW1lID0ge3NjaGVtZTogc3RyaW5nLCBleHRlbnQ/OiBudW1iZXJbXSwgY291bnQ/OiBudW1iZXJ9O1xuZXhwb3J0IHR5cGUgVmdSYW5nZSA9IHN0cmluZyB8IFZnRGF0YVJlZiB8IChudW1iZXJ8c3RyaW5nfFZnRGF0YVJlZnxWZ1NpZ25hbFJlZilbXSB8IFZnU2NoZW1lIHwgVmdSYW5nZVN0ZXA7XG5cbmV4cG9ydCB0eXBlIFZnUmFuZ2VTdGVwID0ge3N0ZXA6IG51bWJlciB8IFZnU2lnbmFsUmVmfTtcbmV4cG9ydCBmdW5jdGlvbiBpc1ZnUmFuZ2VTdGVwKHJhbmdlOiBWZ1JhbmdlKTogcmFuZ2UgaXMgVmdSYW5nZVN0ZXAge1xuICByZXR1cm4gISFyYW5nZVsnc3RlcCddO1xufVxuXG4vLyBEb21haW5zIHRoYXQgYXJlIG5vdCBhIHVuaW9uIG9mIGRvbWFpbnNcbmV4cG9ydCB0eXBlIFZnTm9uVW5pb25Eb21haW4gPSBhbnlbXSB8IFZnRGF0YVJlZiB8IFZnU2lnbmFsUmVmO1xuZXhwb3J0IHR5cGUgVmdEb21haW4gPSBWZ05vblVuaW9uRG9tYWluIHwgRGF0YVJlZlVuaW9uRG9tYWluIHwgVmdGaWVsZFJlZlVuaW9uRG9tYWluO1xuXG5leHBvcnQgdHlwZSBWZ01hcmtHcm91cCA9IGFueTtcblxuZXhwb3J0IGludGVyZmFjZSBWZ1NjYWxlIHtcbiAgbmFtZTogc3RyaW5nO1xuICB0eXBlOiBTY2FsZVR5cGU7XG4gIGRvbWFpbjogVmdEb21haW47XG4gIGRvbWFpblJhdz86IFZnU2lnbmFsUmVmO1xuICByYW5nZTogVmdSYW5nZTtcblxuICBjbGFtcD86IGJvb2xlYW47XG4gIGJhc2U/OiBudW1iZXI7XG4gIGV4cG9uZW50PzogbnVtYmVyO1xuICBpbnRlcnBvbGF0ZT86ICdyZ2InfCAnbGFiJyB8ICdoY2wnIHwgJ2hzbCcgfCAnaHNsLWxvbmcnIHwgJ2hjbC1sb25nJyB8ICdjdWJlaGVsaXgnIHwgJ2N1YmVoZWxpeC1sb25nJztcbiAgbmljZT86IGJvb2xlYW4gfCBOaWNlVGltZTtcbiAgcGFkZGluZz86IG51bWJlcjtcbiAgcGFkZGluZ0lubmVyPzogbnVtYmVyO1xuICBwYWRkaW5nT3V0ZXI/OiBudW1iZXI7XG4gIHJldmVyc2U/OiBib29sZWFuO1xuICByb3VuZD86IGJvb2xlYW47XG4gIHplcm8/OiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBWZ0xheW91dEFsaWduID0gJ25vbmUnIHwgJ2VhY2gnIHwgJ2FsbCc7XG5cbmV4cG9ydCB0eXBlIFJvd0NvbDxUPiA9IHtcbiAgcm93PzogVCxcbiAgY29sdW1uPzogVFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBWZ0xheW91dCB7XG4gIHBhZGRpbmc6IG51bWJlciB8IFJvd0NvbDxudW1iZXI+O1xuICBoZWFkZXJCYW5kPzogbnVtYmVyIHwgUm93Q29sPG51bWJlcj47XG4gIGZvb3RlckJhbmQ/OiBudW1iZXIgfCBSb3dDb2w8bnVtYmVyPjtcbiAgb2Zmc2V0OiBudW1iZXIgfCB7XG4gICAgcm93SGVhZGVyOiBudW1iZXIsXG4gICAgcm93Rm9vdGVyOiBudW1iZXIsXG4gICAgcm93VGl0bGU6IG51bWJlcixcbiAgICBjb2x1bW5IZWFkZXI6IG51bWJlcixcbiAgICBjb2x1bW5Gb290ZXI6IG51bWJlcixcbiAgICBjb2x1bW5UaXRsZTogbnVtYmVyXG4gIH07XG4gIGJvdW5kczogJ2Z1bGwnIHwgJ2ZsdXNoJztcbiAgY29sdW1ucz86IG51bWJlciB8IHtzaWduYWw6IHN0cmluZ307XG4gIGFsaWduPzogVmdMYXlvdXRBbGlnbiB8IHtcbiAgICByb3c6IFZnTGF5b3V0QWxpZ24sXG4gICAgY29sdW1uOiBWZ0xheW91dEFsaWduXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0RhdGFSZWZVbmlvbmVkRG9tYWluKGRvbWFpbjogVmdEb21haW4pOiBkb21haW4gaXMgRGF0YVJlZlVuaW9uRG9tYWluIHtcbiAgaWYgKCFpc0FycmF5KGRvbWFpbikpIHtcbiAgICByZXR1cm4gJ2ZpZWxkcycgaW4gZG9tYWluICYmICEoJ2RhdGEnIGluIGRvbWFpbik7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGaWVsZFJlZlVuaW9uRG9tYWluKGRvbWFpbjogVmdEb21haW4pOiBkb21haW4gaXMgVmdGaWVsZFJlZlVuaW9uRG9tYWluIHtcbiAgaWYgKCFpc0FycmF5KGRvbWFpbikpIHtcbiAgICByZXR1cm4gJ2ZpZWxkcycgaW4gZG9tYWluICYmICdkYXRhJyBpbiBkb21haW47XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRhUmVmRG9tYWluKGRvbWFpbjogVmdEb21haW4pOiBkb21haW4gaXMgVmdEYXRhUmVmIHtcbiAgaWYgKCFpc0FycmF5KGRvbWFpbikpIHtcbiAgICAgcmV0dXJuICdmaWVsZCcgaW4gZG9tYWluICYmICdkYXRhJyBpbiBkb21haW47XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTaWduYWxSZWZEb21haW4oZG9tYWluOiBWZ0RvbWFpbik6IGRvbWFpbiBpcyBWZ1NpZ25hbFJlZiB7XG4gIGlmICghaXNBcnJheShkb21haW4pKSB7XG4gICAgcmV0dXJuICdzaWduYWwnIGluIGRvbWFpbjtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmdFdmVudEhhbmRsZXIge1xuICBldmVudHM6IHN0cmluZ1tdIHwgVmdTaWduYWxSZWY7XG4gIHVwZGF0ZT86IHN0cmluZztcbiAgZW5jb2RlPzogc3RyaW5nO1xuICBmb3JjZT86IGJvb2xlYW47XG4gIGJldHdlZW4/OiBhbnlbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZ1NpZ25hbCB7XG4gIG5hbWU6IHN0cmluZztcbiAgYmluZD86IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIG9uPzogVmdFdmVudEhhbmRsZXJbXTtcbiAgdXBkYXRlPzogc3RyaW5nO1xuICByZWFjdD86IGJvb2xlYW47XG4gIHZhbHVlPzogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IHt9IHwgVmdTaWduYWxSZWY7XG4gIC8vIG9ubHkgZm9yIG5lc3RlZCBzaWduYWxzXG4gIHB1c2g/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFZnRW5jb2RlQ2hhbm5lbCA9ICd4J3wneDInfCd4Yyd8J3dpZHRoJ3wneSd8J3kyJ3wneWMnfCdoZWlnaHQnfCdvcGFjaXR5J3wnZmlsbCd8J2ZpbGxPcGFjaXR5J3wnc3Ryb2tlJ3wnc3Ryb2tlV2lkdGgnfCdzdHJva2VPcGFjaXR5J3wnc3Ryb2tlRGFzaCd8J3N0cm9rZURhc2hPZmZzZXQnfCdjdXJzb3InfCdjbGlwJ3wnc2l6ZSd8J3NoYXBlJ3wncGF0aCd8J2lubmVyUmFkaXVzJ3wnb3V0ZXJSYWRpdXMnfCdzdGFydEFuZ2xlJ3wnZW5kQW5nbGUnfCdpbnRlcnBvbGF0ZSd8J3RlbnNpb24nfCdvcmllbnQnfCd1cmwnfCdhbGlnbid8J2Jhc2VsaW5lJ3wndGV4dCd8J2Rpcid8J2VsbGlwc2lzJ3wnbGltaXQnfCdkeCd8J2R5J3wncmFkaXVzJ3wndGhldGEnfCdhbmdsZSd8J2ZvbnQnfCdmb250U2l6ZSd8J2ZvbnRXZWlnaHQnfCdmb250U3R5bGUnO1xuZXhwb3J0IHR5cGUgVmdFbmNvZGVFbnRyeSA9IHtcbiAgW2sgaW4gVmdFbmNvZGVDaGFubmVsXT86IFZnVmFsdWVSZWYgfCAoVmdWYWx1ZVJlZiAmIHt0ZXN0Pzogc3RyaW5nfSlbXTtcbn07XG5cblxuLy8gVE9ETzogbWFrZSBleHBvcnQgaW50ZXJmYWNlIFZnRW5jb2RlRW50cnkge1xuLy8gICB4PzogVmdWYWx1ZVJlZjxudW1iZXI+XG4vLyAgIHk/OiBWZ1ZhbHVlUmVmPG51bWJlcj5cbi8vICAuLi5cbi8vICAgY29sb3I/OiBWZ1ZhbHVlUmVmPHN0cmluZz5cbi8vICAuLi5cbi8vIH1cblxuZXhwb3J0IHR5cGUgQXhpc09yaWVudCA9ICd0b3AnIHwgJ3JpZ2h0JyB8ICdsZWZ0JyB8ICdib3R0b20nO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZnQXhpcyB7XG4gIHNjYWxlOiBzdHJpbmc7XG4gIGRvbWFpbj86IGJvb2xlYW47XG4gIGZvcm1hdD86IHN0cmluZztcbiAgZ3JpZD86IGJvb2xlYW47XG4gIGdyaWRTY2FsZT86IHN0cmluZztcblxuICBsYWJlbHM/OiBib29sZWFuO1xuXG4gIGxhYmVsQm91bmQ/OiBib29sZWFuIHwgbnVtYmVyO1xuICBsYWJlbEZsdXNoPzogYm9vbGVhbiB8IG51bWJlcjtcbiAgbGFiZWxQYWRkaW5nPzogbnVtYmVyO1xuICBsYWJlbE92ZXJsYXA/OiBib29sZWFuIHwgJ3Bhcml0eScgfCAnZ3JlZWR5JztcbiAgbWF4RXh0ZW50PzogbnVtYmVyO1xuICBtaW5FeHRlbnQ/OiBudW1iZXI7XG4gIG9mZnNldD86IG51bWJlcjtcbiAgb3JpZW50PzogQXhpc09yaWVudDtcbiAgcG9zaXRpb24/OiBudW1iZXI7XG5cbiAgdGlja3M/OiBib29sZWFuO1xuICB0aWNrQ291bnQ/OiBudW1iZXI7XG4gIHRpY2tTaXplPzogbnVtYmVyO1xuXG4gIHRpdGxlPzogc3RyaW5nO1xuICB0aXRsZVBhZGRpbmc/OiBudW1iZXI7XG5cbiAgdmFsdWVzPzogYW55W10gfCBWZ1NpZ25hbFJlZjtcbiAgemluZGV4PzogbnVtYmVyO1xuXG4gIGVuY29kZT86IFZnQXhpc0VuY29kZTtcbn1cblxuZXhwb3J0IHR5cGUgTGVnZW5kVHlwZSA9ICdzeW1ib2wnIHwgJ2dyYWRpZW50JztcblxuZXhwb3J0IGludGVyZmFjZSBWZ0xlZ2VuZCB7XG4gIGZpbGw/OiBzdHJpbmc7XG4gIHN0cm9rZT86IHN0cmluZztcbiAgc2l6ZT86IHN0cmluZztcbiAgc2hhcGU/OiBzdHJpbmc7XG4gIG9wYWNpdHk/OiBzdHJpbmc7XG5cbiAgZW50cnlQYWRkaW5nPzogbnVtYmVyO1xuICBmb3JtYXQ/OiBzdHJpbmc7XG5cbiAgb2Zmc2V0PzogbnVtYmVyO1xuICBvcmllbnQ/OiBMZWdlbmRPcmllbnQ7XG4gIHBhZGRpbmc/OiBudW1iZXI7XG5cbiAgdGlja0NvdW50PzogbnVtYmVyO1xuICB0aXRsZT86IHN0cmluZztcbiAgdHlwZT86IExlZ2VuZFR5cGU7XG4gIHZhbHVlcz86IGFueVtdIHwgVmdTaWduYWxSZWY7XG4gIHppbmRleD86IG51bWJlcjtcblxuICBlbmNvZGU/OiBWZ0xlZ2VuZEVuY29kZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZ0JpblRyYW5zZm9ybSBleHRlbmRzIEJhc2VCaW4ge1xuICB0eXBlOiAnYmluJztcbiAgZXh0ZW50PzogbnVtYmVyW10gfCB7c2lnbmFsOiBzdHJpbmd9O1xuICBmaWVsZDogc3RyaW5nO1xuICBhczogc3RyaW5nW107XG4gIHNpZ25hbD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZ0V4dGVudFRyYW5zZm9ybSB7XG4gIHR5cGU6ICdleHRlbnQnO1xuICBmaWVsZDogc3RyaW5nO1xuICBzaWduYWw6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZ0Zvcm11bGFUcmFuc2Zvcm0ge1xuICB0eXBlOiAnZm9ybXVsYSc7XG4gIGFzOiBzdHJpbmc7XG4gIGV4cHI6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZ0ZpbHRlclRyYW5zZm9ybSB7XG4gIHR5cGU6ICdmaWx0ZXInO1xuICBleHByOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmdBZ2dyZWdhdGVUcmFuc2Zvcm0ge1xuICB0eXBlOiAnYWdncmVnYXRlJztcbiAgZ3JvdXBieT86IFZnRmllbGRSZWZbXTtcbiAgZmllbGRzPzogVmdGaWVsZFJlZltdO1xuICBvcHM/OiBBZ2dyZWdhdGVPcFtdO1xuICBhcz86IHN0cmluZ1tdO1xuICBjcm9zcz86IGJvb2xlYW47XG4gIGRyb3A/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZnQ29sbGVjdFRyYW5zZm9ybSB7XG4gIHR5cGU6ICdjb2xsZWN0JztcbiAgc29ydDogVmdTb3J0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZnTG9va3VwVHJhbnNmb3JtIHtcbiAgdHlwZTogJ2xvb2t1cCc7XG4gIGZyb206IHN0cmluZztcbiAga2V5OiBzdHJpbmc7XG4gIGZpZWxkczogc3RyaW5nW107XG4gIHZhbHVlcz86IHN0cmluZ1tdO1xuICBhcz86IHN0cmluZ1tdO1xuICBkZWZhdWx0Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZnU3RhY2tUcmFuc2Zvcm0ge1xuICB0eXBlOiAnc3RhY2snO1xuICBvZmZzZXQ/OiBTdGFja09mZnNldDtcbiAgZ3JvdXBieTogc3RyaW5nW107XG4gIGZpZWxkOiBzdHJpbmc7XG4gIHNvcnQ6IFZnU29ydDtcbiAgYXM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZnSWRlbnRpZmllclRyYW5zZm9ybSB7XG4gIHR5cGU6ICdpZGVudGlmaWVyJztcbiAgYXM6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgVmdUcmFuc2Zvcm0gPSBWZ0JpblRyYW5zZm9ybSB8IFZnRXh0ZW50VHJhbnNmb3JtIHwgVmdGb3JtdWxhVHJhbnNmb3JtIHwgVmdBZ2dyZWdhdGVUcmFuc2Zvcm0gfCBWZ0ZpbHRlclRyYW5zZm9ybSB8IFZnSW1wdXRlVHJhbnNmb3JtIHwgVmdTdGFja1RyYW5zZm9ybSB8IFZnQ29sbGVjdFRyYW5zZm9ybSB8IFZnTG9va3VwVHJhbnNmb3JtIHwgVmdJZGVudGlmaWVyVHJhbnNmb3JtO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZnQXhpc0VuY29kZSB7XG4gIHRpY2tzPzogVmdHdWlkZUVuY29kZTtcbiAgbGFiZWxzPzogVmdHdWlkZUVuY29kZTtcbiAgdGl0bGU/OiBWZ0d1aWRlRW5jb2RlO1xuICBncmlkPzogVmdHdWlkZUVuY29kZTtcbiAgZG9tYWluPzogVmdHdWlkZUVuY29kZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZ0xlZ2VuZEVuY29kZSB7XG4gIHRpdGxlPzogVmdHdWlkZUVuY29kZTtcbiAgbGFiZWxzPzogVmdHdWlkZUVuY29kZTtcbiAgbGVnZW5kPzogVmdHdWlkZUVuY29kZTtcbiAgc3ltYm9scz86IFZnR3VpZGVFbmNvZGU7XG4gIGdyYWRpZW50PzogVmdHdWlkZUVuY29kZTtcbn1cblxuZXhwb3J0IHR5cGUgVmdHdWlkZUVuY29kZSA9IGFueTsgLy8gVE9ETzogcmVwbGFjZSB0aGlzIChTZWUgZ3VpZGVFbmNvZGUgaW4gVmVnYSBTY2hlbWEpXG5cbmV4cG9ydCB0eXBlIFZnU29ydCA9IHtcbiAgZmllbGQ6IHN0cmluZztcbiAgb3JkZXI/OiAnYXNjZW5kaW5nJyB8ICdkZXNjZW5kaW5nJztcbn0gfCB7XG4gIGZpZWxkOiBzdHJpbmdbXTtcbiAgb3JkZXI/OiAoJ2FzY2VuZGluZycgfCAnZGVzY2VuZGluZycpW107XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFZnSW1wdXRlVHJhbnNmb3JtIHtcbiAgdHlwZTogJ2ltcHV0ZSc7XG4gIGdyb3VwYnk/OiBzdHJpbmdbXTtcbiAgZmllbGQ6IHN0cmluZztcbiAga2V5OiBzdHJpbmc7XG4gIGtleXZhbHM/OiBzdHJpbmdbXTtcbiAgbWV0aG9kPzogJ3ZhbHVlJyB8ICdtZWRpYW4nIHwgJ21heCcgfCAnbWluJyB8ICdtZWFuJztcbiAgdmFsdWU/OiBhbnk7XG59XG5cbmV4cG9ydCB0eXBlIFZnQ2hlY2tib3hCaW5kaW5nID0ge1xuICBpbnB1dDogJ2NoZWNrYm94JztcbiAgZWxlbWVudD86IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFZnUmFkaW9CaW5kaW5nID0ge1xuICBpbnB1dDogJ3JhZGlvJztcbiAgb3B0aW9uczogc3RyaW5nW107XG4gIGVsZW1lbnQ/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBWZ1NlbGVjdEJpbmRpbmcgPSB7XG4gIGlucHV0OiAnc2VsZWN0JztcbiAgb3B0aW9uczogc3RyaW5nW107XG4gIGVsZW1lbnQ/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBWZ1JhbmdlQmluZGluZyA9IHtcbiAgaW5wdXQ6ICdyYW5nZSc7XG4gIG1pbj86IG51bWJlcjtcbiAgbWF4PzogbnVtYmVyO1xuICBzdGVwPzogbnVtYmVyO1xuICBlbGVtZW50Pzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgVmdHZW5lcmljQmluZGluZyA9IHtcbiAgaW5wdXQ6IHN0cmluZztcbiAgZWxlbWVudD86IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIFZnQmluZGluZyA9IFZnQ2hlY2tib3hCaW5kaW5nIHwgVmdSYWRpb0JpbmRpbmcgfFxuICBWZ1NlbGVjdEJpbmRpbmcgfCBWZ1JhbmdlQmluZGluZyB8IFZnR2VuZXJpY0JpbmRpbmc7XG5cblxuLyoqXG4gKiBCYXNlIG9iamVjdCBmb3IgVmVnYSdzIEF4aXMgYW5kIEF4aXMgQ29uZmlnLlxuICogQWxsIG9mIHRoZXNlIHByb3BlcnRpZXMgYXJlIGJvdGggcHJvcGVydGllcyBvZiBWZWdhJ3MgQXhpcyBhbmQgQXhpcyBDb25maWcuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmdBeGlzQmFzZSB7XG4gIC8qKlxuICAgKiBBIGJvb2xlYW4gZmxhZyBpbmRpY2F0aW5nIGlmIHRoZSBkb21haW4gKHRoZSBheGlzIGJhc2VsaW5lKSBzaG91bGQgYmUgaW5jbHVkZWQgYXMgcGFydCBvZiB0aGUgYXhpcy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGB0cnVlYFxuICAgKi9cbiAgZG9tYWluPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQSBib29sZWFuIGZsYWcgaW5kaWNhdGluZyBpZiBncmlkIGxpbmVzIHNob3VsZCBiZSBpbmNsdWRlZCBhcyBwYXJ0IG9mIHRoZSBheGlzXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgdHJ1ZWAgZm9yIFtjb250aW51b3VzIHNjYWxlc10oc2NhbGUuaHRtbCNjb250aW51b3VzKSB0aGF0IGFyZSBub3QgYmlubmVkOyBvdGhlcndpc2UsIGBmYWxzZWAuXG4gICAqL1xuICBncmlkPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQSBib29sZWFuIGZsYWcgaW5kaWNhdGluZyBpZiBsYWJlbHMgc2hvdWxkIGJlIGluY2x1ZGVkIGFzIHBhcnQgb2YgdGhlIGF4aXMuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyAgYHRydWVgLlxuICAgKi9cbiAgbGFiZWxzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIGxhYmVscyBzaG91bGQgYmUgaGlkZGVuIGlmIHRoZXkgZXhjZWVkIHRoZSBheGlzIHJhbmdlLiBJZsKgYGZhbHNlwqBgKHRoZSBkZWZhdWx0KSBubyBib3VuZHMgb3ZlcmxhcCBhbmFseXNpcyBpcyBwZXJmb3JtZWQuIElmwqBgdHJ1ZWAsIGxhYmVscyB3aWxsIGJlIGhpZGRlbiBpZiB0aGV5IGV4Y2VlZCB0aGUgYXhpcyByYW5nZSBieSBtb3JlIHRoYW4gMSBwaXhlbC4gSWYgdGhpcyBwcm9wZXJ0eSBpcyBhIG51bWJlciwgaXQgc3BlY2lmaWVzIHRoZSBwaXhlbCB0b2xlcmFuY2U6IHRoZSBtYXhpbXVtIGFtb3VudCBieSB3aGljaCBhIGxhYmVsIGJvdW5kaW5nIGJveCBtYXkgZXhjZWVkIHRoZSBheGlzIHJhbmdlLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYGZhbHNlYC5cbiAgICovXG4gIGxhYmVsQm91bmQ/OiBib29sZWFuIHwgbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGZpcnN0IGFuZCBsYXN0IGF4aXMgbGFiZWxzIHNob3VsZCBiZSBhbGlnbmVkIGZsdXNoIHdpdGggdGhlIHNjYWxlIHJhbmdlLiBGbHVzaCBhbGlnbm1lbnQgZm9yIGEgaG9yaXpvbnRhbCBheGlzIHdpbGwgbGVmdC1hbGlnbiB0aGUgZmlyc3QgbGFiZWwgYW5kIHJpZ2h0LWFsaWduIHRoZSBsYXN0IGxhYmVsLiBGb3IgdmVydGljYWwgYXhlcywgYm90dG9tIGFuZCB0b3AgdGV4dCBiYXNlbGluZXMgYXJlIGFwcGxpZWQgaW5zdGVhZC4gSWYgdGhpcyBwcm9wZXJ0eSBpcyBhIG51bWJlciwgaXQgYWxzbyBpbmRpY2F0ZXMgdGhlIG51bWJlciBvZiBwaXhlbHMgYnkgd2hpY2ggdG8gb2Zmc2V0IHRoZSBmaXJzdCBhbmQgbGFzdCBsYWJlbHM7IGZvciBleGFtcGxlLCBhIHZhbHVlIG9mIDIgd2lsbCBmbHVzaC1hbGlnbiB0aGUgZmlyc3QgYW5kIGxhc3QgbGFiZWxzIGFuZCBhbHNvIHB1c2ggdGhlbSAyIHBpeGVscyBvdXR3YXJkIGZyb20gdGhlIGNlbnRlciBvZiB0aGUgYXhpcy4gVGhlIGFkZGl0aW9uYWwgYWRqdXN0bWVudCBjYW4gc29tZXRpbWVzIGhlbHAgdGhlIGxhYmVscyBiZXR0ZXIgdmlzdWFsbHkgZ3JvdXAgd2l0aCBjb3JyZXNwb25kaW5nIGF4aXMgdGlja3MuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgdHJ1ZWAgZm9yIGF4aXMgb2YgYSBjb250aW51b3VzIHgtc2NhbGUuIE90aGVyd2lzZSwgYGZhbHNlYC5cbiAgICovXG4gIGxhYmVsRmx1c2g/OiBib29sZWFuIHwgbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgc3RyYXRlZ3kgdG8gdXNlIGZvciByZXNvbHZpbmcgb3ZlcmxhcCBvZiBheGlzIGxhYmVscy4gSWYgYGZhbHNlYCAodGhlIGRlZmF1bHQpLCBubyBvdmVybGFwIHJlZHVjdGlvbiBpcyBhdHRlbXB0ZWQuIElmIHNldCB0byBgdHJ1ZWAgb3IgYFwicGFyaXR5XCJgLCBhIHN0cmF0ZWd5IG9mIHJlbW92aW5nIGV2ZXJ5IG90aGVyIGxhYmVsIGlzIHVzZWQgKHRoaXMgd29ya3Mgd2VsbCBmb3Igc3RhbmRhcmQgbGluZWFyIGF4ZXMpLiBJZiBzZXQgdG8gYFwiZ3JlZWR5XCJgLCBhIGxpbmVhciBzY2FuIG9mIHRoZSBsYWJlbHMgaXMgcGVyZm9ybWVkLCByZW1vdmluZyBhbnkgbGFiZWxzIHRoYXQgb3ZlcmxhcHMgd2l0aCB0aGUgbGFzdCB2aXNpYmxlIGxhYmVsICh0aGlzIG9mdGVuIHdvcmtzIGJldHRlciBmb3IgbG9nLXNjYWxlZCBheGVzKS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGB0cnVlYCBmb3Igbm9uLW5vbWluYWwgZmllbGRzIHdpdGggbm9uLWxvZyBzY2FsZXM7IGBcImdyZWVkeVwiYCBmb3IgbG9nIHNjYWxlczsgb3RoZXJ3aXNlIGBmYWxzZWAuXG4gICAqL1xuICBsYWJlbE92ZXJsYXA/OiBib29sZWFuIHwgJ3Bhcml0eScgfCAnZ3JlZWR5JztcblxuICAvKipcbiAgICogVGhlIHBhZGRpbmcsIGluIHBpeGVscywgYmV0d2VlbiBheGlzIGFuZCB0ZXh0IGxhYmVscy5cbiAgICovXG4gIGxhYmVsUGFkZGluZz86IG51bWJlcjtcblxuICAvKipcbiAgICogQm9vbGVhbiB2YWx1ZSB0aGF0IGRldGVybWluZXMgd2hldGhlciB0aGUgYXhpcyBzaG91bGQgaW5jbHVkZSB0aWNrcy5cbiAgICovXG4gIHRpY2tzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIHNpemUgaW4gcGl4ZWxzIG9mIGF4aXMgdGlja3MuXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIHRpY2tTaXplPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBNYXggbGVuZ3RoIGZvciBheGlzIHRpdGxlIGlmIHRoZSB0aXRsZSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBmcm9tIHRoZSBmaWVsZCdzIGRlc2NyaXB0aW9uLlxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgdW5kZWZpbmVkYC5cbiAgICovXG4gIHRpdGxlTWF4TGVuZ3RoPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgcGFkZGluZywgaW4gcGl4ZWxzLCBiZXR3ZWVuIHRpdGxlIGFuZCBheGlzLlxuICAgKi9cbiAgdGl0bGVQYWRkaW5nPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbWluaW11bSBleHRlbnQgaW4gcGl4ZWxzIHRoYXQgYXhpcyB0aWNrcyBhbmQgbGFiZWxzIHNob3VsZCB1c2UuIFRoaXMgZGV0ZXJtaW5lcyBhIG1pbmltdW0gb2Zmc2V0IHZhbHVlIGZvciBheGlzIHRpdGxlcy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGAzMGAgZm9yIHktYXhpczsgYHVuZGVmaW5lZGAgZm9yIHgtYXhpcy5cbiAgICovXG4gIG1pbkV4dGVudD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gZXh0ZW50IGluIHBpeGVscyB0aGF0IGF4aXMgdGlja3MgYW5kIGxhYmVscyBzaG91bGQgdXNlLiBUaGlzIGRldGVybWluZXMgYSBtYXhpbXVtIG9mZnNldCB2YWx1ZSBmb3IgYXhpcyB0aXRsZXMuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgdW5kZWZpbmVkYC5cbiAgICovXG4gIG1heEV4dGVudD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZ0F4aXNDb25maWcgZXh0ZW5kcyBWZ0F4aXNCYXNlIHtcbiAgLyoqXG4gICAqIEFuIGludGVycG9sYXRpb24gZnJhY3Rpb24gaW5kaWNhdGluZyB3aGVyZSwgZm9yIGBiYW5kYCBzY2FsZXMsIGF4aXMgdGlja3Mgc2hvdWxkIGJlIHBvc2l0aW9uZWQuIEEgdmFsdWUgb2YgYDBgIHBsYWNlcyB0aWNrcyBhdCB0aGUgbGVmdCBlZGdlIG9mIHRoZWlyIGJhbmRzLiBBIHZhbHVlIG9mIGAwLjVgIHBsYWNlcyB0aWNrcyBpbiB0aGUgbWlkZGxlIG9mIHRoZWlyIGJhbmRzLlxuICAgKi9cbiAgYmFuZFBvc2l0aW9uPzogbnVtYmVyO1xuICAvKipcbiAgICogU3Ryb2tlIHdpZHRoIG9mIGF4aXMgZG9tYWluIGxpbmVcbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fICAobm9uZSwgdXNpbmcgVmVnYSBkZWZhdWx0KS5cbiAgICovXG4gIGRvbWFpbldpZHRoPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDb2xvciBvZiBheGlzIGRvbWFpbiBsaW5lLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gIChub25lLCB1c2luZyBWZWdhIGRlZmF1bHQpLlxuICAgKi9cbiAgZG9tYWluQ29sb3I/OiBzdHJpbmc7XG5cbiAgLy8gLS0tLS0tLS0tLSBHcmlkIC0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIENvbG9yIG9mIGdyaWRsaW5lcy5cbiAgICovXG4gIGdyaWRDb2xvcj86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG9mZnNldCAoaW4gcGl4ZWxzKSBpbnRvIHdoaWNoIHRvIGJlZ2luIGRyYXdpbmcgd2l0aCB0aGUgZ3JpZCBkYXNoIGFycmF5LlxuICAgKi9cbiAgZ3JpZERhc2g/OiBudW1iZXJbXTtcblxuICAvKipcbiAgICogVGhlIHN0cm9rZSBvcGFjaXR5IG9mIGdyaWQgKHZhbHVlIGJldHdlZW4gWzAsMV0pXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyAoYDFgIGJ5IGRlZmF1bHQpXG4gICAqIEBtaW5pbXVtIDBcbiAgICogQG1heGltdW0gMVxuICAgKi9cbiAgZ3JpZE9wYWNpdHk/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBncmlkIHdpZHRoLCBpbiBwaXhlbHMuXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIGdyaWRXaWR0aD86IG51bWJlcjtcblxuICAvLyAtLS0tLS0tLS0tIFRpY2tzIC0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgYXhpcydzIHRpY2suXG4gICAqL1xuICB0aWNrQ29sb3I/OiBzdHJpbmc7XG5cblxuICAvKipcbiAgICogVGhlIHJvdGF0aW9uIGFuZ2xlIG9mIHRoZSBheGlzIGxhYmVscy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGAtOTBgIGZvciBub21pbmFsIGFuZCBvcmRpbmFsIGZpZWxkczsgYDBgIG90aGVyd2lzZS5cbiAgICpcbiAgICogQG1pbmltdW0gLTM2MFxuICAgKiBAbWF4aW11bSAzNjBcbiAgICovXG4gIGxhYmVsQW5nbGU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgdGljayBsYWJlbCwgY2FuIGJlIGluIGhleCBjb2xvciBjb2RlIG9yIHJlZ3VsYXIgY29sb3IgbmFtZS5cbiAgICovXG4gIGxhYmVsQ29sb3I/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBmb250IG9mIHRoZSB0aWNrIGxhYmVsLlxuICAgKi9cbiAgbGFiZWxGb250Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZm9udCBzaXplIG9mIHRoZSBsYWJlbCwgaW4gcGl4ZWxzLlxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBsYWJlbEZvbnRTaXplPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIGFsbG93ZWQgcGl4ZWwgd2lkdGggb2YgYXhpcyB0aWNrIGxhYmVscy5cbiAgICovXG4gIGxhYmVsTGltaXQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEJvb2xlYW4gZmxhZyBpbmRpY2F0aW5nIGlmIHBpeGVsIHBvc2l0aW9uIHZhbHVlcyBzaG91bGQgYmUgcm91bmRlZCB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyLlxuICAgKi9cbiAgdGlja1JvdW5kPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIHdpZHRoLCBpbiBwaXhlbHMsIG9mIHRpY2tzLlxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICB0aWNrV2lkdGg/OiBudW1iZXI7XG5cbiAgLy8gLS0tLS0tLS0tLSBUaXRsZSAtLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEhvcml6b250YWwgdGV4dCBhbGlnbm1lbnQgb2YgYXhpcyB0aXRsZXMuXG4gICAqL1xuICB0aXRsZUFsaWduPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBbmdsZSBpbiBkZWdyZWVzIG9mIGF4aXMgdGl0bGVzLlxuICAgKi9cbiAgdGl0bGVBbmdsZT86IG51bWJlcjtcbiAgLyoqXG4gICAqIFZlcnRpY2FsIHRleHQgYmFzZWxpbmUgZm9yIGF4aXMgdGl0bGVzLlxuICAgKi9cbiAgdGl0bGVCYXNlbGluZT86IHN0cmluZztcbiAgLyoqXG4gICAqIENvbG9yIG9mIHRoZSB0aXRsZSwgY2FuIGJlIGluIGhleCBjb2xvciBjb2RlIG9yIHJlZ3VsYXIgY29sb3IgbmFtZS5cbiAgICovXG4gIHRpdGxlQ29sb3I/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEZvbnQgb2YgdGhlIHRpdGxlLiAoZS5nLiwgYFwiSGVsdmV0aWNhIE5ldWVcImApLlxuICAgKi9cbiAgdGl0bGVGb250Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBGb250IHNpemUgb2YgdGhlIHRpdGxlLlxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICB0aXRsZUZvbnRTaXplPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBGb250IHdlaWdodCBvZiB0aGUgdGl0bGUuIChlLmcuLCBgXCJib2xkXCJgKS5cbiAgICovXG4gIHRpdGxlRm9udFdlaWdodD86IHN0cmluZyB8IG51bWJlcjtcblxuICAvKipcbiAgICogTWF4aW11bSBhbGxvd2VkIHBpeGVsIHdpZHRoIG9mIGF4aXMgdGl0bGVzLlxuICAgKi9cbiAgdGl0bGVMaW1pdD86IG51bWJlcjtcblxuICAvKipcbiAgICogWC1jb29yZGluYXRlIG9mIHRoZSBheGlzIHRpdGxlIHJlbGF0aXZlIHRvIHRoZSBheGlzIGdyb3VwLlxuICAgKi9cbiAgdGl0bGVYPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBZLWNvb3JkaW5hdGUgb2YgdGhlIGF4aXMgdGl0bGUgcmVsYXRpdmUgdG8gdGhlIGF4aXMgZ3JvdXAuXG4gICAqL1xuICB0aXRsZVk/OiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIExlZ2VuZE9yaWVudCA9ICdsZWZ0JyB8ICdyaWdodCcgfCAndG9wLWxlZnQnIHwgJ3RvcC1yaWdodCcgfCAnYm90dG9tLWxlZnQnIHwgJ2JvdHRvbS1yaWdodCcgfCAnbm9uZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmdMZWdlbmRCYXNlIHtcbiAgLyoqXG4gICAqIFBhZGRpbmcgKGluIHBpeGVscykgYmV0d2VlbiBsZWdlbmQgZW50cmllcyBpbiBhIHN5bWJvbCBsZWdlbmQuXG4gICAqL1xuICBlbnRyeVBhZGRpbmc/OiBudW1iZXI7XG5cblxuICAvKipcbiAgICogVGhlIG9yaWVudGF0aW9uIG9mIHRoZSBsZWdlbmQsIHdoaWNoIGRldGVybWluZXMgaG93IHRoZSBsZWdlbmQgaXMgcG9zaXRpb25lZCB3aXRoaW4gdGhlIHNjZW5lLiBPbmUgb2YgXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJ0b3AtbGVmdFwiLCBcInRvcC1yaWdodFwiLCBcImJvdHRvbS1sZWZ0XCIsIFwiYm90dG9tLXJpZ2h0XCIsIFwibm9uZVwiLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYFwicmlnaHRcImBcbiAgICovXG4gIG9yaWVudD86IExlZ2VuZE9yaWVudDtcblxuICAvKipcbiAgICogVGhlIG9mZnNldCwgaW4gcGl4ZWxzLCBieSB3aGljaCB0byBkaXNwbGFjZSB0aGUgbGVnZW5kIGZyb20gdGhlIGVkZ2Ugb2YgdGhlIGVuY2xvc2luZyBncm91cCBvciBkYXRhIHJlY3RhbmdsZS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fICBgMGBcbiAgICovXG4gIG9mZnNldD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHBhZGRpbmcsIGluIHBpeGVscywgYmV0d2VlbiB0aGUgbGVnZW5kIGFuZCBheGlzLlxuICAgKi9cbiAgcGFkZGluZz86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWZ0xlZ2VuZENvbmZpZyBleHRlbmRzIFZnTGVnZW5kQmFzZSB7XG5cbiAgLyoqXG4gICAqIENvcm5lciByYWRpdXMgZm9yIHRoZSBmdWxsIGxlZ2VuZC5cbiAgICovXG4gIGNvcm5lclJhZGl1cz86IG51bWJlcjtcblxuICAvKipcbiAgICogQmFja2dyb3VuZCBmaWxsIGNvbG9yIGZvciB0aGUgZnVsbCBsZWdlbmQuXG4gICAqL1xuICBmaWxsQ29sb3I/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEJvcmRlciBzdHJva2UgY29sb3IgZm9yIHRoZSBmdWxsIGxlZ2VuZC5cbiAgICovXG4gIHN0cm9rZUNvbG9yPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBCb3JkZXIgc3Ryb2tlIGRhc2ggcGF0dGVybiBmb3IgdGhlIGZ1bGwgbGVnZW5kLlxuICAgKi9cbiAgc3Ryb2tlRGFzaD86IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBCb3JkZXIgc3Ryb2tlIHdpZHRoIGZvciB0aGUgZnVsbCBsZWdlbmQuXG4gICAqL1xuICBzdHJva2VXaWR0aD86IG51bWJlcjtcbiAgLy8gLS0tLS0tLS0tLSBHcmFkaWVudCAtLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGdyYWRpZW50IHN0cm9rZSwgY2FuIGJlIGluIGhleCBjb2xvciBjb2RlIG9yIHJlZ3VsYXIgY29sb3IgbmFtZS5cbiAgICovXG4gIGdyYWRpZW50U3Ryb2tlQ29sb3I/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgZ3JhZGllbnQgc3Ryb2tlLCBpbiBwaXhlbHMuXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIGdyYWRpZW50U3Ryb2tlV2lkdGg/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBoZWlnaHQgb2YgdGhlIGdyYWRpZW50LCBpbiBwaXhlbHMuXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIGdyYWRpZW50SGVpZ2h0PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUZXh0IGJhc2VsaW5lIGZvciBjb2xvciByYW1wIGdyYWRpZW50IGxhYmVscy5cbiAgICovXG4gIGdyYWRpZW50TGFiZWxCYXNlbGluZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gYWxsb3dlZCBsZW5ndGggaW4gcGl4ZWxzIG9mIGNvbG9yIHJhbXAgZ3JhZGllbnQgbGFiZWxzLlxuICAgKi9cbiAgZ3JhZGllbnRMYWJlbExpbWl0PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBWZXJ0aWNhbCBvZmZzZXQgaW4gcGl4ZWxzIGZvciBjb2xvciByYW1wIGdyYWRpZW50IGxhYmVscy5cbiAgICovXG4gIGdyYWRpZW50TGFiZWxPZmZzZXQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgZ3JhZGllbnQsIGluIHBpeGVscy5cbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgZ3JhZGllbnRXaWR0aD86IG51bWJlcjtcblxuICAvLyAtLS0tLS0tLS0tIExhYmVsIC0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFRoZSBhbGlnbm1lbnQgb2YgdGhlIGxlZ2VuZCBsYWJlbCwgY2FuIGJlIGxlZnQsIG1pZGRsZSBvciByaWdodC5cbiAgICovXG4gIGxhYmVsQWxpZ24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbiBvZiB0aGUgYmFzZWxpbmUgb2YgbGVnZW5kIGxhYmVsLCBjYW4gYmUgdG9wLCBtaWRkbGUgb3IgYm90dG9tLlxuICAgKi9cbiAgbGFiZWxCYXNlbGluZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBsZWdlbmQgbGFiZWwsIGNhbiBiZSBpbiBoZXggY29sb3IgY29kZSBvciByZWd1bGFyIGNvbG9yIG5hbWUuXG4gICAqL1xuICBsYWJlbENvbG9yPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZm9udCBvZiB0aGUgbGVnZW5kIGxhYmVsLlxuICAgKi9cbiAgbGFiZWxGb250Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZm9udCBzaXplIG9mIGxlZ2VuZCBsYWJlbC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGAxMGAuXG4gICAqXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIGxhYmVsRm9udFNpemU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gYWxsb3dlZCBwaXhlbCB3aWR0aCBvZiBheGlzIHRpY2sgbGFiZWxzLlxuICAgKi9cbiAgbGFiZWxMaW1pdD86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG9mZnNldCBvZiB0aGUgbGVnZW5kIGxhYmVsLlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBsYWJlbE9mZnNldD86IG51bWJlcjtcblxuICAvLyAtLS0tLS0tLS0tIFN5bWJvbHMgLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhlIGNvbG9yIG9mIHRoZSBsZWdlbmQgc3ltYm9sLFxuICAgKi9cbiAgc3ltYm9sQ29sb3I/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgc2hhcGUgdHlwZSAoc3VjaCBhcyBcImNpcmNsZVwiKSBmb3IgbGVnZW5kIHN5bWJvbHMuXG4gICAqL1xuICBzeW1ib2xUeXBlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgbGVnZW5kIHN5bWJvbCwgaW4gcGl4ZWxzLlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBzeW1ib2xTaXplPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIHN5bWJvbCdzIHN0cm9rZS5cbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgc3ltYm9sU3Ryb2tlV2lkdGg/OiBudW1iZXI7XG5cbiAgLy8gLS0tLS0tLS0tLSBUaXRsZSAtLS0tLS0tLS0tXG4gIC8qKlxuICAgKiBIb3Jpem9udGFsIHRleHQgYWxpZ25tZW50IGZvciBsZWdlbmQgdGl0bGVzLlxuICAgKi9cbiAgdGl0bGVBbGlnbj86IHN0cmluZztcblxuICAgLyoqXG4gICAgKiBWZXJ0aWNhbCB0ZXh0IGJhc2VsaW5lIGZvciBsZWdlbmQgdGl0bGVzLlxuICAgICovXG4gIHRpdGxlQmFzZWxpbmU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGxlZ2VuZCB0aXRsZSwgY2FuIGJlIGluIGhleCBjb2xvciBjb2RlIG9yIHJlZ3VsYXIgY29sb3IgbmFtZS5cbiAgICovXG4gIHRpdGxlQ29sb3I/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBmb250IG9mIHRoZSBsZWdlbmQgdGl0bGUuXG4gICAqL1xuICB0aXRsZUZvbnQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBmb250IHNpemUgb2YgdGhlIGxlZ2VuZCB0aXRsZS5cbiAgICovXG4gIHRpdGxlRm9udFNpemU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBmb250IHdlaWdodCBvZiB0aGUgbGVnZW5kIHRpdGxlLlxuICAgKi9cbiAgdGl0bGVGb250V2VpZ2h0Pzogc3RyaW5nIHwgbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIGFsbG93ZWQgcGl4ZWwgd2lkdGggb2YgYXhpcyB0aXRsZXMuXG4gICAqL1xuICB0aXRsZUxpbWl0PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgcGFkZGluZywgaW4gcGl4ZWxzLCBiZXR3ZWVuIHRpdGxlIGFuZCBsZWdlbmQuXG4gICAqL1xuICB0aXRsZVBhZGRpbmc/OiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIEZvbnRTdHlsZSA9ICdub3JtYWwnIHwgJ2l0YWxpYyc7XG5leHBvcnQgdHlwZSBGb250V2VpZ2h0ID0gJ25vcm1hbCcgfCAnYm9sZCc7XG4vKipcbiAqIEBUSlMtdHlwZSBpbnRlZ2VyXG4gKiBAbWluaW11bSAxMDBcbiAqIEBtYXhpbXVtIDkwMFxuICovXG5leHBvcnQgdHlwZSBGb250V2VpZ2h0TnVtYmVyID0gbnVtYmVyO1xuZXhwb3J0IHR5cGUgSG9yaXpvbnRhbEFsaWduID0gJ2xlZnQnIHwgJ3JpZ2h0JyB8ICdjZW50ZXInO1xuZXhwb3J0IHR5cGUgSW50ZXJwb2xhdGUgPSAnbGluZWFyJyB8ICdsaW5lYXItY2xvc2VkJyB8XG4gICdzdGVwJyB8ICdzdGVwLWJlZm9yZScgfCAnc3RlcC1hZnRlcicgfFxuICAnYmFzaXMnIHwgJ2Jhc2lzLW9wZW4nIHwgJ2Jhc2lzLWNsb3NlZCcgfFxuICAnY2FyZGluYWwnIHwgJ2NhcmRpbmFsLW9wZW4nIHwgJ2NhcmRpbmFsLWNsb3NlZCcgfFxuICAnYnVuZGxlJyB8ICdtb25vdG9uZSc7XG5leHBvcnQgdHlwZSBPcmllbnQgPSAnaG9yaXpvbnRhbCcgfCAndmVydGljYWwnO1xuZXhwb3J0IHR5cGUgVmVydGljYWxBbGlnbiA9ICd0b3AnIHwgJ21pZGRsZScgfCAnYm90dG9tJztcblxuZXhwb3J0IGludGVyZmFjZSBWZ01hcmtDb25maWcge1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IEZpbGwgQ29sb3IuICBUaGlzIGhhcyBoaWdoZXIgcHJlY2VkZW5jZSB0aGFuIGNvbmZpZy5jb2xvclxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gKE5vbmUpXG4gICAqXG4gICAqL1xuICBmaWxsPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IFN0cm9rZSBDb2xvci4gIFRoaXMgaGFzIGhpZ2hlciBwcmVjZWRlbmNlIHRoYW4gY29uZmlnLmNvbG9yXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyAoTm9uZSlcbiAgICpcbiAgICovXG4gIHN0cm9rZT86IHN0cmluZztcblxuICAvLyAtLS0tLS0tLS0tIE9wYWNpdHkgLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhlIG92ZXJhbGwgb3BhY2l0eSAodmFsdWUgYmV0d2VlbiBbMCwxXSkuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMC43YCBmb3Igbm9uLWFnZ3JlZ2F0ZSBwbG90cyB3aXRoIGBwb2ludGAsIGB0aWNrYCwgYGNpcmNsZWAsIG9yIGBzcXVhcmVgIG1hcmtzIG9yIGxheWVyZWQgYGJhcmAgY2hhcnRzIGFuZCBgMWAgb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqIEBtYXhpbXVtIDFcbiAgICovXG4gIG9wYWNpdHk/OiBudW1iZXI7XG5cblxuICAvKipcbiAgICogVGhlIGZpbGwgb3BhY2l0eSAodmFsdWUgYmV0d2VlbiBbMCwxXSkuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMWBcbiAgICpcbiAgICogQG1pbmltdW0gMFxuICAgKiBAbWF4aW11bSAxXG4gICAqL1xuICBmaWxsT3BhY2l0eT86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHN0cm9rZSBvcGFjaXR5ICh2YWx1ZSBiZXR3ZWVuIFswLDFdKS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGAxYFxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqIEBtYXhpbXVtIDFcbiAgICovXG4gIHN0cm9rZU9wYWNpdHk/OiBudW1iZXI7XG5cbiAgLy8gLS0tLS0tLS0tLSBTdHJva2UgU3R5bGUgLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhlIHN0cm9rZSB3aWR0aCwgaW4gcGl4ZWxzLlxuICAgKlxuICAgKiBAbWluaW11bSAwXG4gICAqL1xuICBzdHJva2VXaWR0aD86IG51bWJlcjtcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgYWx0ZXJuYXRpbmcgc3Ryb2tlLCBzcGFjZSBsZW5ndGhzIGZvciBjcmVhdGluZyBkYXNoZWQgb3IgZG90dGVkIGxpbmVzLlxuICAgKi9cbiAgc3Ryb2tlRGFzaD86IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBUaGUgb2Zmc2V0IChpbiBwaXhlbHMpIGludG8gd2hpY2ggdG8gYmVnaW4gZHJhd2luZyB3aXRoIHRoZSBzdHJva2UgZGFzaCBhcnJheS5cbiAgICovXG4gIHN0cm9rZURhc2hPZmZzZXQ/OiBudW1iZXI7XG5cbiAgLy8gLS0tLS0tLS0tLSBPcmllbnRhdGlvbjogQmFyLCBUaWNrLCBMaW5lLCBBcmVhIC0tLS0tLS0tLS1cbiAgLyoqXG4gICAqIFRoZSBvcmllbnRhdGlvbiBvZiBhIG5vbi1zdGFja2VkIGJhciwgdGljaywgYXJlYSwgYW5kIGxpbmUgY2hhcnRzLlxuICAgKiBUaGUgdmFsdWUgaXMgZWl0aGVyIGhvcml6b250YWwgKGRlZmF1bHQpIG9yIHZlcnRpY2FsLlxuICAgKiAtIEZvciBiYXIsIHJ1bGUgYW5kIHRpY2ssIHRoaXMgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzaXplIG9mIHRoZSBiYXIgYW5kIHRpY2tcbiAgICogc2hvdWxkIGJlIGFwcGxpZWQgdG8geCBvciB5IGRpbWVuc2lvbi5cbiAgICogLSBGb3IgYXJlYSwgdGhpcyBwcm9wZXJ0eSBkZXRlcm1pbmVzIHRoZSBvcmllbnQgcHJvcGVydHkgb2YgdGhlIFZlZ2Egb3V0cHV0LlxuICAgKiAtIEZvciBsaW5lLCB0aGlzIHByb3BlcnR5IGRldGVybWluZXMgdGhlIHNvcnQgb3JkZXIgb2YgdGhlIHBvaW50cyBpbiB0aGUgbGluZVxuICAgKiBpZiBgY29uZmlnLnNvcnRMaW5lQnlgIGlzIG5vdCBzcGVjaWZpZWQuXG4gICAqIEZvciBzdGFja2VkIGNoYXJ0cywgdGhpcyBpcyBhbHdheXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JpZW50YXRpb24gb2YgdGhlIHN0YWNrO1xuICAgKiB0aGVyZWZvcmUgZXhwbGljaXRseSBzcGVjaWZpZWQgdmFsdWUgd2lsbCBiZSBpZ25vcmVkLlxuICAgKi9cbiAgb3JpZW50PzogT3JpZW50O1xuXG4gIC8vIC0tLS0tLS0tLS0gSW50ZXJwb2xhdGlvbjogTGluZSAvIGFyZWEgLS0tLS0tLS0tLVxuICAvKipcbiAgICogVGhlIGxpbmUgaW50ZXJwb2xhdGlvbiBtZXRob2QgdG8gdXNlIGZvciBsaW5lIGFuZCBhcmVhIG1hcmtzLiBPbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAgICogLSBgXCJsaW5lYXJcImA6IHBpZWNld2lzZSBsaW5lYXIgc2VnbWVudHMsIGFzIGluIGEgcG9seWxpbmUuXG4gICAqIC0gYFwibGluZWFyLWNsb3NlZFwiYDogY2xvc2UgdGhlIGxpbmVhciBzZWdtZW50cyB0byBmb3JtIGEgcG9seWdvbi5cbiAgICogLSBgXCJzdGVwXCJgOiBhbHRlcm5hdGUgYmV0d2VlbiBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCBzZWdtZW50cywgYXMgaW4gYSBzdGVwIGZ1bmN0aW9uLlxuICAgKiAtIGBcInN0ZXAtYmVmb3JlXCJgOiBhbHRlcm5hdGUgYmV0d2VlbiB2ZXJ0aWNhbCBhbmQgaG9yaXpvbnRhbCBzZWdtZW50cywgYXMgaW4gYSBzdGVwIGZ1bmN0aW9uLlxuICAgKiAtIGBcInN0ZXAtYWZ0ZXJcImA6IGFsdGVybmF0ZSBiZXR3ZWVuIGhvcml6b250YWwgYW5kIHZlcnRpY2FsIHNlZ21lbnRzLCBhcyBpbiBhIHN0ZXAgZnVuY3Rpb24uXG4gICAqIC0gYFwiYmFzaXNcImA6IGEgQi1zcGxpbmUsIHdpdGggY29udHJvbCBwb2ludCBkdXBsaWNhdGlvbiBvbiB0aGUgZW5kcy5cbiAgICogLSBgXCJiYXNpcy1vcGVuXCJgOiBhbiBvcGVuIEItc3BsaW5lOyBtYXkgbm90IGludGVyc2VjdCB0aGUgc3RhcnQgb3IgZW5kLlxuICAgKiAtIGBcImJhc2lzLWNsb3NlZFwiYDogYSBjbG9zZWQgQi1zcGxpbmUsIGFzIGluIGEgbG9vcC5cbiAgICogLSBgXCJjYXJkaW5hbFwiYDogYSBDYXJkaW5hbCBzcGxpbmUsIHdpdGggY29udHJvbCBwb2ludCBkdXBsaWNhdGlvbiBvbiB0aGUgZW5kcy5cbiAgICogLSBgXCJjYXJkaW5hbC1vcGVuXCJgOiBhbiBvcGVuIENhcmRpbmFsIHNwbGluZTsgbWF5IG5vdCBpbnRlcnNlY3QgdGhlIHN0YXJ0IG9yIGVuZCwgYnV0IHdpbGwgaW50ZXJzZWN0IG90aGVyIGNvbnRyb2wgcG9pbnRzLlxuICAgKiAtIGBcImNhcmRpbmFsLWNsb3NlZFwiYDogYSBjbG9zZWQgQ2FyZGluYWwgc3BsaW5lLCBhcyBpbiBhIGxvb3AuXG4gICAqIC0gYFwiYnVuZGxlXCJgOiBlcXVpdmFsZW50IHRvIGJhc2lzLCBleGNlcHQgdGhlIHRlbnNpb24gcGFyYW1ldGVyIGlzIHVzZWQgdG8gc3RyYWlnaHRlbiB0aGUgc3BsaW5lLlxuICAgKiAtIGBcIm1vbm90b25lXCJgOiBjdWJpYyBpbnRlcnBvbGF0aW9uIHRoYXQgcHJlc2VydmVzIG1vbm90b25pY2l0eSBpbiB5LlxuICAgKi9cbiAgaW50ZXJwb2xhdGU/OiBJbnRlcnBvbGF0ZTtcbiAgLyoqXG4gICAqIERlcGVuZGluZyBvbiB0aGUgaW50ZXJwb2xhdGlvbiB0eXBlLCBzZXRzIHRoZSB0ZW5zaW9uIHBhcmFtZXRlciAoZm9yIGxpbmUgYW5kIGFyZWEgbWFya3MpLlxuICAgKiBAbWluaW11bSAwXG4gICAqIEBtYXhpbXVtIDFcbiAgICovXG4gIHRlbnNpb24/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHN5bWJvbCBzaGFwZSB0byB1c2UuIE9uZSBvZjogYFwiY2lyY2xlXCJgIChkZWZhdWx0KSwgYFwic3F1YXJlXCJgLCBgXCJjcm9zc1wiYCwgYFwiZGlhbW9uZFwiYCwgYFwidHJpYW5nbGUtdXBcImAsIG9yIGBcInRyaWFuZ2xlLWRvd25cImAsIG9yIGEgY3VzdG9tIFNWRyBwYXRoLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYFwiY2lyY2xlXCJgXG4gICAqXG4gICAqL1xuICBzaGFwZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHBpeGVsIGFyZWEgZWFjaCB0aGUgcG9pbnQvY2lyY2xlL3NxdWFyZS5cbiAgICogRm9yIGV4YW1wbGU6IGluIHRoZSBjYXNlIG9mIGNpcmNsZXMsIHRoZSByYWRpdXMgaXMgZGV0ZXJtaW5lZCBpbiBwYXJ0IGJ5IHRoZSBzcXVhcmUgcm9vdCBvZiB0aGUgc2l6ZSB2YWx1ZS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGAzMGBcbiAgICpcbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgc2l6ZT86IG51bWJlcjtcblxuICAvLyBUZXh0IC8gTGFiZWwgTWFyayBDb25maWdcblxuICAvKipcbiAgICogVGhlIGhvcml6b250YWwgYWxpZ25tZW50IG9mIHRoZSB0ZXh0LiBPbmUgb2YgYFwibGVmdFwiYCwgYFwicmlnaHRcImAsIGBcImNlbnRlclwiYC5cbiAgICovXG4gIGFsaWduPzogSG9yaXpvbnRhbEFsaWduO1xuXG4gIC8qKlxuICAgKiBUaGUgcm90YXRpb24gYW5nbGUgb2YgdGhlIHRleHQsIGluIGRlZ3JlZXMuXG4gICAqIEBtaW5pbXVtIDBcbiAgICogQG1heGltdW0gMzYwXG4gICAqL1xuICBhbmdsZT86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHZlcnRpY2FsIGFsaWdubWVudCBvZiB0aGUgdGV4dC4gT25lIG9mIGBcInRvcFwiYCwgYFwibWlkZGxlXCJgLCBgXCJib3R0b21cImAuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgXCJtaWRkbGVcImBcbiAgICpcbiAgICovXG4gIGJhc2VsaW5lPzogVmVydGljYWxBbGlnbjtcblxuICAvKipcbiAgICogVGhlIGhvcml6b250YWwgb2Zmc2V0LCBpbiBwaXhlbHMsIGJldHdlZW4gdGhlIHRleHQgbGFiZWwgYW5kIGl0cyBhbmNob3IgcG9pbnQuIFRoZSBvZmZzZXQgaXMgYXBwbGllZCBhZnRlciByb3RhdGlvbiBieSB0aGUgX2FuZ2xlXyBwcm9wZXJ0eS5cbiAgICovXG4gIGR4PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdmVydGljYWwgb2Zmc2V0LCBpbiBwaXhlbHMsIGJldHdlZW4gdGhlIHRleHQgbGFiZWwgYW5kIGl0cyBhbmNob3IgcG9pbnQuIFRoZSBvZmZzZXQgaXMgYXBwbGllZCBhZnRlciByb3RhdGlvbiBieSB0aGUgX2FuZ2xlXyBwcm9wZXJ0eS5cbiAgICovXG4gIGR5PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBQb2xhciBjb29yZGluYXRlIHJhZGlhbCBvZmZzZXQsIGluIHBpeGVscywgb2YgdGhlIHRleHQgbGFiZWwgZnJvbSB0aGUgb3JpZ2luIGRldGVybWluZWQgYnkgdGhlIGB4YCBhbmQgYHlgIHByb3BlcnRpZXMuXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIHJhZGl1cz86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1heGltdW0gbGVuZ3RoIG9mIHRoZSB0ZXh0IG1hcmsgaW4gcGl4ZWxzIChkZWZhdWx0IDAsIGluZGljYXRpbmcgbm8gbGltaXQpLiBUaGUgdGV4dCB2YWx1ZSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgdHJ1bmNhdGVkIGlmIHRoZSByZW5kZXJlZCBzaXplIGV4Y2VlZHMgdGhlIGxpbWl0LlxuICAgKi9cbiAgbGltaXQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFBvbGFyIGNvb3JkaW5hdGUgYW5nbGUsIGluIHJhZGlhbnMsIG9mIHRoZSB0ZXh0IGxhYmVsIGZyb20gdGhlIG9yaWdpbiBkZXRlcm1pbmVkIGJ5IHRoZSBgeGAgYW5kIGB5YCBwcm9wZXJ0aWVzLiBWYWx1ZXMgZm9yIGB0aGV0YWAgZm9sbG93IHRoZSBzYW1lIGNvbnZlbnRpb24gb2YgYGFyY2AgbWFyayBgc3RhcnRBbmdsZWAgYW5kIGBlbmRBbmdsZWAgcHJvcGVydGllczogYW5nbGVzIGFyZSBtZWFzdXJlZCBpbiByYWRpYW5zLCB3aXRoIGAwYCBpbmRpY2F0aW5nIFwibm9ydGhcIi5cbiAgICovXG4gIHRoZXRhPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZWZhY2UgdG8gc2V0IHRoZSB0ZXh0IGluIChlLmcuLCBgXCJIZWx2ZXRpY2EgTmV1ZVwiYCkuXG4gICAqL1xuICBmb250Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZm9udCBzaXplLCBpbiBwaXhlbHMuXG4gICAqIEBtaW5pbXVtIDBcbiAgICovXG4gIGZvbnRTaXplPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgZm9udCBzdHlsZSAoZS5nLiwgYFwiaXRhbGljXCJgKS5cbiAgICovXG4gIGZvbnRTdHlsZT86IEZvbnRTdHlsZTtcbiAgLyoqXG4gICAqIFRoZSBmb250IHdlaWdodCAoZS5nLiwgYFwiYm9sZFwiYCkuXG4gICAqL1xuICBmb250V2VpZ2h0PzogRm9udFdlaWdodCB8IEZvbnRXZWlnaHROdW1iZXI7XG5cbiAgLyoqXG4gICAqIFBsYWNlaG9sZGVyIHRleHQgaWYgdGhlIGB0ZXh0YCBjaGFubmVsIGlzIG5vdCBzcGVjaWZpZWRcbiAgICovXG4gIHRleHQ/OiBzdHJpbmc7XG59XG5cbmNvbnN0IFZHX01BUktfQ09ORklHX0lOREVYOiBGbGFnPGtleW9mIFZnTWFya0NvbmZpZz4gPSB7XG4gIG9wYWNpdHk6IDEsXG4gIGZpbGw6IDEsXG4gIGZpbGxPcGFjaXR5OiAxLFxuICBzdHJva2U6IDEsXG4gIHN0cm9rZVdpZHRoOiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VEYXNoOiAxLFxuICBzdHJva2VEYXNoT2Zmc2V0OiAxLFxuICBzaXplOiAxLFxuICBzaGFwZTogMSxcbiAgaW50ZXJwb2xhdGU6IDEsXG4gIHRlbnNpb246IDEsXG4gIG9yaWVudDogMSxcbiAgYWxpZ246IDEsXG4gIGJhc2VsaW5lOiAxLFxuICB0ZXh0OiAxLFxuICBsaW1pdDogMSxcbiAgZHg6IDEsXG4gIGR5OiAxLFxuICByYWRpdXM6IDEsXG4gIHRoZXRhOiAxLFxuICBhbmdsZTogMSxcbiAgZm9udDogMSxcbiAgZm9udFNpemU6IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGZvbnRTdHlsZTogMVxuICAvLyBjb21tZW50ZWQgYmVsb3cgYXJlIHZnIGNoYW5uZWwgdGhhdCBkbyBub3QgaGF2ZSBtYXJrIGNvbmZpZy5cbiAgLy8gJ3gnfCd4Mid8J3hjJ3wnd2lkdGgnfCd5J3wneTInfCd5Yyd8J2hlaWdodCdcbiAgLy8gY3Vyc29yOiAxLFxuICAvLyBjbGlwOiAxLFxuICAvLyBkaXI6IDEsXG4gIC8vIGVsbGlwc2lzOiAxLFxuICAvLyBlbmRBbmdsZTogMSxcbiAgLy8gcGF0aDogMSxcbiAgLy8gaW5uZXJSYWRpdXM6IDEsXG4gIC8vIG91dGVyUmFkaXVzOiAxLFxuICAvLyBzdGFydEFuZ2xlOiAxLFxuICAvLyB1cmw6IDEsXG59O1xuXG5leHBvcnQgY29uc3QgVkdfTUFSS19DT05GSUdTID0gZmxhZ0tleXMoVkdfTUFSS19DT05GSUdfSU5ERVgpO1xuXG5leHBvcnQgdHlwZSBBbmNob3IgPSAnc3RhcnQnIHwgJ21pZGRsZScgfCAnZW5kJztcblxuZXhwb3J0IGludGVyZmFjZSBWZ1RpdGxlIHtcbiAgLyoqXG4gICAqIFRoZSB0aXRsZSB0ZXh0LlxuICAgKi9cbiAgdGV4dDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb3JpZW50YXRpb24gb2YgdGhlIHRpdGxlIHJlbGF0aXZlIHRvIHRoZSBjaGFydC4gT25lIG9mIGBcInRvcFwiYCAodGhlIGRlZmF1bHQpLCBgXCJib3R0b21cImAsIGBcImxlZnRcImAsIG9yIGBcInJpZ2h0XCJgLlxuICAgKi9cbiAgb3JpZW50PzogVGl0bGVPcmllbnQ7XG5cbiAgLyoqXG4gICAqIFRoZSBhbmNob3IgcG9zaXRpb24gZm9yIHBsYWNpbmcgdGhlIHRpdGxlLiBPbmUgb2YgYFwic3RhcnRcImAsIGBcIm1pZGRsZVwiYCAodGhlIGRlZmF1bHQpLCBvciBgXCJlbmRcImAuIEZvciBleGFtcGxlLCB3aXRoIGFuIG9yaWVudGF0aW9uIG9mIHRvcCB0aGVzZSBhbmNob3IgcG9zaXRpb25zIG1hcCB0byBhIGxlZnQtLCBjZW50ZXItLCBvciByaWdodC1hbGlnbmVkIHRpdGxlLlxuICAgKi9cbiAgYW5jaG9yPzogQW5jaG9yO1xuXG4gIC8qKlxuICAgKiBUaGUgb3J0aG9nb25hbCBvZmZzZXQgaW4gcGl4ZWxzIGJ5IHdoaWNoIHRvIGRpc3BsYWNlIHRoZSB0aXRsZSBmcm9tIGl0cyBwb3NpdGlvbiBhbG9uZyB0aGUgZWRnZSBvZiB0aGUgY2hhcnQuXG4gICAqL1xuICBvZmZzZXQ/OiBudW1iZXI7XG5cbiAgc3R5bGU/OiBzdHJpbmcgfCBzdHJpbmdbXTtcblxuICAvLyBUT0RPOiBuYW1lLCBlbmNvZGUsIGludGVyYWN0aXZlLCB6aW5kZXhcbn1cblxuZXhwb3J0IHR5cGUgVGl0bGVPcmllbnQgPSAndG9wJyB8ICdib3R0b20nIHwgJ2xlZnQnIHwgJ3JpZ2h0JztcblxuZXhwb3J0IGludGVyZmFjZSBWZ1RpdGxlQ29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSBhbmNob3IgcG9zaXRpb24gZm9yIHBsYWNpbmcgdGhlIHRpdGxlLiBPbmUgb2YgYFwic3RhcnRcImAsIGBcIm1pZGRsZVwiYCwgb3IgYFwiZW5kXCJgLiBGb3IgZXhhbXBsZSwgd2l0aCBhbiBvcmllbnRhdGlvbiBvZiB0b3AgdGhlc2UgYW5jaG9yIHBvc2l0aW9ucyBtYXAgdG8gYSBsZWZ0LSwgY2VudGVyLSwgb3IgcmlnaHQtYWxpZ25lZCB0aXRsZS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBcIm1pZGRsZVwiYCBmb3IgW3NpbmdsZV0oc3BlYy5odG1sKSBhbmQgW2xheWVyZWRdKGxheWVyLmh0bWwpIHZpZXdzLlxuICAgKiBgXCJzdGFydFwiYCBmb3Igb3RoZXIgY29tcG9zaXRlIHZpZXdzLlxuICAgKlxuICAgKiBfX05vdGU6X18gW0ZvciBub3ddKGh0dHBzOi8vZ2l0aHViLmNvbS92ZWdhL3ZlZ2EtbGl0ZS9pc3N1ZXMvMjg3NSksIGBhbmNob3JgIGlzIG9ubHkgY3VzdG9taXphYmxlIG9ubHkgZm9yIFtzaW5nbGVdKHNwZWMuaHRtbCkgYW5kIFtsYXllcmVkXShsYXllci5odG1sKSB2aWV3cy4gIEZvciBvdGhlciBjb21wb3NpdGUgdmlld3MsIGBhbmNob3JgIGlzIGFsd2F5cyBgXCJzdGFydFwiYC5cbiAgICovXG4gIGFuY2hvcj86IEFuY2hvcjtcbiAgLyoqXG4gICAqIEFuZ2xlIGluIGRlZ3JlZXMgb2YgdGl0bGUgdGV4dC5cbiAgICovXG4gIGFuZ2xlPzpcdG51bWJlcjtcbiAgLyoqXG4gICAqIFZlcnRpY2FsIHRleHQgYmFzZWxpbmUgZm9yIHRpdGxlIHRleHQuXG4gICAqL1xuICBiYXNlbGluZT86IFZlcnRpY2FsQWxpZ247XG4gIC8qKlxuICAgKiBUZXh0IGNvbG9yIGZvciB0aXRsZSB0ZXh0LlxuICAgKi9cbiAgY29sb3I/Olx0c3RyaW5nO1xuICAvKipcbiAgICogRm9udCBuYW1lIGZvciB0aXRsZSB0ZXh0LlxuICAgKi9cbiAgZm9udD86XHRzdHJpbmc7XG4gIC8qKlxuICAgKiBGb250IHNpemUgaW4gcGl4ZWxzIGZvciB0aXRsZSB0ZXh0LlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYDEwYC5cbiAgICpcbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgZm9udFNpemU/Olx0bnVtYmVyO1xuICAvKipcbiAgICogRm9udCB3ZWlnaHQgZm9yIHRpdGxlIHRleHQuXG4gICAqL1xuICBmb250V2VpZ2h0PzogRm9udFdlaWdodCB8IEZvbnRXZWlnaHROdW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBhbGxvd2VkIGxlbmd0aCBpbiBwaXhlbHMgb2YgbGVnZW5kIGxhYmVscy5cbiAgICpcbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgbGltaXQ/Olx0bnVtYmVyO1xuICAvKipcbiAgICogT2Zmc2V0IGluIHBpeGVscyBvZiB0aGUgdGl0bGUgZnJvbSB0aGUgY2hhcnQgYm9keSBhbmQgYXhlcy5cbiAgICovXG4gIG9mZnNldD86XHRudW1iZXI7XG4gIC8qKlxuICAgKiBEZWZhdWx0IHRpdGxlIG9yaWVudGF0aW9uIChcInRvcFwiLCBcImJvdHRvbVwiLCBcImxlZnRcIiwgb3IgXCJyaWdodFwiKVxuICAgKi9cbiAgb3JpZW50PzogVGl0bGVPcmllbnQ7XG59XG4iXX0=